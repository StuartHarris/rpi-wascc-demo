// This file is @generated by wasmcloud/weld-codegen 0.4.5.
// It is not intended for manual editing.
// namespace: com.redbadger.interfaces.oled

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    //cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct Request {
    #[serde(default)]
    pub text: String,
}

// Encode Request as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &Request,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    e.str("text")?;
    e.str(&val.text)?;
    Ok(())
}

// Decode Request from cbor input stream
#[doc(hidden)]
pub fn decode_request(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<Request, RpcError> {
    let __result = {
        let mut text: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct Request, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => text = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "text" => text = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        Request {
            text: if let Some(__x) = text {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field Request.text (#0)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// wasmbus.contractId: redbadger:oled
/// wasmbus.providerReceive
#[async_trait]
pub trait Oled {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "redbadger:oled"
    }
    async fn update(&self, ctx: &Context, arg: &Request) -> RpcResult<()>;
    async fn clear(&self, ctx: &Context) -> RpcResult<()>;
}

/// OledReceiver receives messages defined in the Oled service trait
#[doc(hidden)]
#[async_trait]
pub trait OledReceiver: MessageDispatch + Oled {
    async fn dispatch<'disp__, 'ctx__, 'msg__>(
        &'disp__ self,
        ctx: &'ctx__ Context,
        message: &Message<'msg__>,
    ) -> Result<Message<'msg__>, RpcError> {
        match message.method {
            "Update" => {
                let value: Request = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'Request': {}", e)))?;

                let _resp = Oled::update(self, ctx, &value).await?;
                let buf = Vec::new();
                Ok(Message {
                    method: "Oled.Update",
                    arg: Cow::Owned(buf),
                })
            }
            "Clear" => {
                let _resp = Oled::clear(self, ctx).await?;
                let buf = Vec::new();
                Ok(Message {
                    method: "Oled.Clear",
                    arg: Cow::Owned(buf),
                })
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "Oled::{}",
                message.method
            ))),
        }
    }
}

/// OledSender sends messages to a Oled service
/// client for sending Oled messages
#[derive(Debug)]
pub struct OledSender<T: Transport> {
    transport: T,
}

impl<T: Transport> OledSender<T> {
    /// Constructs a OledSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(target_arch = "wasm32")]
impl OledSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for sending to a Oled provider
    /// implementing the 'redbadger:oled' capability contract, with the "default" link
    pub fn new() -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_provider("redbadger:oled", "default")
                .unwrap();
        Self { transport }
    }

    /// Constructs a client for sending to a Oled provider
    /// implementing the 'redbadger:oled' capability contract, with the specified link name
    pub fn new_with_link(link_name: &str) -> wasmbus_rpc::error::RpcResult<Self> {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_provider("redbadger:oled", link_name)?;
        Ok(Self { transport })
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> Oled for OledSender<T> {
    #[allow(unused)]
    async fn update(&self, ctx: &Context, arg: &Request) -> RpcResult<()> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Oled.Update",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;
        Ok(())
    }
    #[allow(unused)]
    async fn clear(&self, ctx: &Context) -> RpcResult<()> {
        let buf = *b"";
        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Oled.Clear",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;
        Ok(())
    }
}
